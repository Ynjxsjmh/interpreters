#lang racket

;; ----- code -----
(define calc
  (lambda (exp)
    (match exp                    ; 1. 分支匹配：表达式的两种情况
      [(? number? x) x]           ; 2. 如果是数字，直接返回
      [`(,op ,e1 ,e2)             ; 3. 如果是表达式，匹配提取操作符 op 和两个操作数e1,e2
       (let ([v1 (calc e1)]       ; 3.1 递归调用 calc 自己，得到 e1 的值，绑定到 v1 上（因为 e1 也可能是个表达式）
             [v2 (calc e2)])      ; 3.2 递归调用 calc 自己，得到 e2 的值，绑定到 v2 上
         (match op                ; 4. 分支匹配：操作符 op 的 4 种情况
           ['+ (+ v1 v2)]         ; 4.1 如果是加号，输出结果为 (+ v1 v2)
           ['- (- v1 v2)]         ; 4.2 如果是减号，乘号，除号，相似的处理
           ['* (* v1 v2)]
           ['/ (/ v1 v2)]))])))



;; ----- examples -----
(calc '(+ 1 2))
;; => 3

(calc '(* 2 3))
;; => 6

(calc '(* (+ 1 2) (+ 3 4)))
;; => 21
